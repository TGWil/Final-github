library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


use work.brick_pkg.all;

entity VGA is 
    port (
        MAX10_CLK1_50 : in std_logic;
        rst_l : in std_logic;
        ball_pos : in pos;
        paddle_pos : in pos;
        bricks : in brick_array;
        VGA_R : out std_logic_vector(3 downto 0);
        VGA_G : out std_logic_vector(3 downto 0);
        VGA_B : out std_logic_vector(3 downto 0);
        VGA_VS : out std_logic;
        VGA_HS : out std_logic
    );
end entity;


architecture behavioral of VGA is
    signal areset, inclk0, clk, locked : std_logic;
    signal row, column, drow, dcol: natural;
    signal de : std_logic := '1';
    signal row_count : integer in range 0 to 29 := 0;
    -- signal bricks : brick_array := (others => (others => '1'));
    -- signal ball : ball_array := (others => (others => '0'));


    component VGA_PLL 
        port
        (
            areset : IN STD_LOGIC  := '0';
            inclk0 : IN STD_LOGIC  := '0';
            c0 : OUT STD_LOGIC ;
            locked : OUT STD_LOGIC 
        );
    end component VGA_PLL;
    

begin 

    PLL_inst : VGA_PLL PORT MAP (
		areset	 => areset,
		inclk0	 => MAX10_CLK1_50,
		c0	 => clk,
		locked	 => locked
	);
    
    process(clk, rst_l) begin -- column tracking
        if rising_edge(clk) then
            if rst_l = '0' then
                column <= 0;
                row <= 0;
                VGA_R <= (others => '0');
                VGA_G <= (others => '0');
                VGA_B <= (others => '0');
                VGA_HS <= '1';
            end if;
            if column < 16 then
                VGA_R <= (others => '0');
                VGA_G <= (others => '0');
                VGA_B <= (others => '0');
                VGA_HS <= '1';
            elsif column >= 16 and column < 112 then
                VGA_R <= (others => '0');
                VGA_G <= (others => '0');
                VGA_B <= (others => '0');
                VGA_HS <= '0';
            elsif column >= 112 and column < 160 then
                VGA_R <= (others => '0');
                VGA_G <= (others => '0');
                VGA_B <= (others => '0');
                VGA_HS <= '1';
            elsif row >= 45 and row < 525 and column >= 160 then -- Display driver starts here
                drow <= row-45;
                dcol <= column-160;

                if row_count > 29 then 
                    row_count <= 0;
                end if;


                -- Display stuff here
-- new row logic
                if drow < 240 and ((to_unsigned(drow,12) and "000000000111") = "000000000000") then
                    VGA_R <= (others => '1');
                    VGA_G <= (others => '1');
                    VGA_B <= (others => '1');
                    row_count <= row_count + 1;
                elsif drow < 240 then
                    VGA_R <= (others => '1');
                    VGA_G <= (others => '0');
                    VGA_B <= (others => '0'); 
                else 
                    VGA_R <= (others => '0');
                    VGA_G <= (others => '0');
                    VGA_B <= (others => '0');
                end if;


                if ((to_unsigned(row_count,5) and "00001") = "1") then
                    if dcol < 639 and drow < 240 and ((to_unsigned(dcol-8,12) and "000000001111") = "000000000000") then
                        VGA_R <= (others => '1');
                        VGA_G <= (others => '1');
                        VGA_B <= (others => '0');
                    end if;
                elsif ((to_unsigned(row_count,5) and "00001") = "0") then
                    if dcol < 639 and drow < 240 and ((to_unsigned(dcol,12) and "000000001111") = "000000000000") then
                        VGA_R <= (others => '0');
                        VGA_G <= (others => '1');
                        VGA_B <= (others => '1');
                    end if;
                end if;

-- -- old row and column logic
--                 if row-45 = 0 or row-45 = 8 or row-45 = 16 or row-45 = 24 or row-45 = 32 or row-45 = 40 or row-45 = 48 or row-45 = 56 or row-45 = 64 or row-45 = 72 or row-45 = 80 or row-45 = 88 or row-45 = 96 or row-45 = 104
--                 or row-45 = 112 or row-45 = 120 or row-45 = 128 or row-45 = 136 or row-45 = 144 or row-45 = 152 or row-45 = 160 or row-45 = 168 or row-45 = 176 or row-45 = 184 or row-45 = 192 or row-45 = 200 or row-45 = 208
--                 or row-45 = 216 or row-45 = 224 or row-45 = 232 then 
--                     offset <= not offset;
--                     VGA_R <= (others => '1');
--                     VGA_G <= (others => '1');
--                     VGA_B <= (others => '1');
--                 elsif bricks(column-160, row-45) = '1' and offset = '0' then 
--                     if column-160 = 16 or column-160 = 32 or column-160 = 48 or column-160 = 64 or column-160 = 80 or column-160 = 96 or column-160 = 112 or column-160 = 128 or column-160 = 144 or column-160 = 160 
--                     or column-160 = 176 or column-160 = 192 or column-160 = 208 or column-160 = 224 or column-160 = 240 or column-160 = 256 or column-160 = 272 or column-160 = 288 or column-160 = 304 or column-160 = 320
--                     or column-160 = 336 or column-160 = 352 or column-160 = 368 or column-160 = 384 or column-160 = 400 or column-160 = 416 or column-160 = 432 or column-160 = 448 or column-160 = 464 or column-160 = 480
--                     or column-160 = 496 or column-160 = 512 or column-160 = 528 or column-160 = 544 or column-160 = 560 or column-160 = 576 or column-160 = 592 or column-160 = 608 or column-160 = 624 or column-160 = 640 then 
--                         VGA_R <= (others => '1');
--                         VGA_G <= (others => '1');
--                         VGA_B <= (others => '1');
--                     else 
--                         VGA_R <= (others => '1');
--                         VGA_G <= (others => '0');
--                         VGA_B <= (others => '0');       
--                     end if;

--                     if row > 285 and row < 525 then 
--                         VGA_R <= (others => '0');
--                         VGA_G <= (others => '0');
--                         VGA_B <= (others => '0');
--                     end if;


--                 elsif bricks(column-160, row-45) = '1' and offset = '1' then
--                     if column-160 = 8 or column-160 = 24 or column-160 = 40 or column-160 = 56 or column-160 = 72 or column-160 = 88 or column-160 = 104 or column-160 = 120 or column-160 = 136 or column-160 = 152
--                     or column-160 = 168 or column-160 = 184 or column-160 = 200 or column-160 = 216 or column-160 = 232 or column-160 = 248 or column-160 = 264 or column-160 = 280 or column-160 = 296 or column-160 = 312
--                     or column-160 = 328 or column-160 = 344 or column-160 = 360 or column-160 = 376 or column-160 = 392 or column-160 = 408 or column-160 = 424 or column-160 = 440 or column-160 = 456 or column-160 = 472
--                     or column-160 = 488 or column-160 = 504 or column-160 = 520 or column-160 = 536 or column-160 = 552 or column-160 = 568 or column-160 = 584 or column-160 = 600 or column-160 = 616 or column-160 = 632 then 
--                         VGA_R <= (others => '1');
--                         VGA_G <= (others => '1');
--                         VGA_B <= (others => '1');
--                     else 
--                         VGA_R <= (others => '1');
--                         VGA_G <= (others => '0');
--                         VGA_B <= (others => '0');       
--                     end if; 

--                     if row > 285 and row < 525 then 
--                         VGA_R <= (others => '0');
--                         VGA_G <= (others => '0');
--                         VGA_B <= (others => '0');
--                     end if;



--                 elsif bricks(column-160, row-45) = '0' then
--                     VGA_R <= (others => '0');
--                     VGA_G <= (others => '0');
--                     VGA_B <= (others => '0');
                    
--                     if row > 285 and row < 525 then 
--                         VGA_R <= (others => '0');
--                         VGA_G <= (others => '0');
--                         VGA_B <= (others => '0');
--                     end if;
--                 end if;

-- paddle and ball display logic
                    
                if column-160 >= ball_pos(0) and column-160 < ball_pos(0)+10 and row-45 >= ball_pos(1) and row-45 < ball_pos(1)+10 then
                    VGA_R <= (others => '1');
                    VGA_G <= (others => '1');
                    VGA_B <= (others => '1');
                end if;

                if column-160 >= paddle_pos(0) and column-160 < paddle_pos(0)+40 and row-45 >= paddle_pos(1) and row-45 < paddle_pos(1)+5 then
                    VGA_R <= "0111";
                    VGA_G <= "0011";
                    VGA_B <= "0000";
                end if;

                  
-- end of vga display area
			end if;
            if  column = 800 then
                column <= 0;
                row <= row + 1;
            else
                column <= column + 1;
            end if;
            if row = 525 then
                row <= 0;
            end if;
        end if;
    end process;

    process(row) begin --Vertical syncing
      if row > 9 and row < 12 then
          VGA_VS <= '0';
      else
          VGA_VS <= '1';
		end if;
    end process;

end architecture;